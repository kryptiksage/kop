#!/bin/sh

aur_pkg () {
	curl -s --compressed -X GET "https://aur.archlinux.org/rpc/?v=5&type=$1&$2" | jq '.results []'
}

case "${1:0:1}" in
	-)
	case $1 in
		-S)			
		for(( i=2; i<=$#; i++ ))
		do
			package=$(pacman -Ssq ${!i} | grep "^${!i}$")
			if [ -z "$package" ]
			then
				package=$(aur_pkg info arg[]=${!i} | jq -r '.Name')
				if [ -z "$package" ]
				then
					echo "Invalid package name : ${!i}"; exit 1
				else
					if [ "$(pacman -Qq $package)" != "$package" ]
					then
						echo "Cloning aur repo..."
						git clone --depth=1 https://aur.archlinux.org/$package.git $HOME/.cache/kop/$package 2>/dev/null
						cd $HOME/.cache/kop/$package
						makepkg -si
					else
						echo "Package $package already exists"
					fi
				fi
			else
			sudo pacman $1 ${!i} 
			fi
		done
		;;
		*)
		sudo pacman $*
		;;
	esac
	;;
	"")
	sudo pacman -Syu
	echo "Updating AUR packages..."
	aur_arguments=$(pacman -Qmq | sed -z 's/^/\&arg[]=/; s/\n/\&arg[]=/g')	
	aur_update=$(curl -s -X GET "https://aur.archlinux.org/rpc/?v=5&type=info$aur_arguments" | jq -r '.results | sort_by(.Name) | .[] | "\(.Name) \(.Version)"')
	aur_installed=$(pacman -Qm)
	lines=$(echo "$aur_installed" | wc -l)
	for (( i=1; i<=$lines; i++ ))	
	do
		aur_old=$(echo "$aur_installed" | sed -n "$i"p)
		aur_new=$(echo "$aur_update" | sed -n "$i"p)
		if [ "$aur_old" != "$aur_new" ]
		then
			pkg=$(echo $aur_old | awk '{print $1}')
			echo "Updating $pkg.."
			pkg_dir=$HOME/.cache/kop/$pkg
			if [ -d $pkg_dir ]
			then
				cd $pkg_dir
				rm -rf $pkg*
				git pull
			else
				git clone https://aur.archlinux.org/$pkg.git $pkg_dir
				cd $pkg_dir
			fi
			makepkg -si
		fi
	done
	;;
	*)
	[ $# -ne 1 ] && echo "Invalid number of arguments" && exit 1
	[ -d $HOME/.cache/kop ] || mkdir -p $HOME/.cache/kop
	aur_pkg search arg=$1 | jq -r '"AUR\/\(.Name) \(.Version)\n\t\(.Description)"' > $HOME/.cache/kop/.pkg_search
	pacman -Ss $1 >> $HOME/.cache/kop/.pkg_search
	cat $HOME/.cache/kop/.pkg_search
	;;
esac
echo "Done"
